// ---------- Generators & datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum PaymentMethod {
  qris
  bank_transfer
}

enum Service {
  economy
  express
}

enum LocalDeliveryStatus {
  on_the_way // from local shop to your warehouse/home
  pending_payment // arrived, weight known, invoice to send
  paid // customer has paid
}

enum DeliveryStatus {
  not_yet_create_label
  label_confirmed
  ready_to_send
  tracking_received
}

// ---------- Core people ----------
model Customer {
  id         String  @id @default(cuid())
  name       String
  phone      String  @unique
  shopeeName String? // optional marketplace handle

  // housekeeping
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@index([phone])
}

model Recipient {
  id               String  @id @default(cuid())
  fullName         String
  address1         String
  address2         String?
  city             String
  state            String?
  zip              String?
  country          String // ISO-2 or readable (your call)
  phone            String?
  email            String?
  companyName      String?
  phoneCode        String? // e.g. "1" for US
  isNoPhone        Boolean @default(false)
  shipmentCategory String? // e.g., "M"
  ioss             String?
  iossCheck        Boolean @default(false)

  // Optional references to sale/channel/remark you provided
  saleRecordNumber String? @unique // "2945"
  saleChannel      String? // Shopee/Etsy/etc
  shipmentRemark   String?

  // housekeeping
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@index([fullName])
  @@index([saleRecordNumber])
}

// ---------- Orders & package ----------
model Order {
  id       String   @id @default(cuid())
  placedAt DateTime
  notes    String?

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Restrict)
  customerId String

  recipient   Recipient @relation(fields: [recipientId], references: [id], onDelete: Restrict)
  recipientId String

  // 1â€“1 relation: packageId must be unique
  package   PackageDetail @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId String        @unique

  quotedAmountMinor Int?
  currency          String?
  pricingSource     String?

  localStatus    LocalDeliveryStatus @default(on_the_way)
  deliveryStatus DeliveryStatus      @default(not_yet_create_label)
  paymentMethod  PaymentMethod       @default(qris)

  externalRef  String?
  labelId      String?
  trackingLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items OrderItem[]

  @@index([placedAt])
  @@index([localStatus, deliveryStatus])
  @@index([customerId])
  @@index([recipientId])
}

model PackageDetail {
  id              String   @id @default(cuid())
  weightGrams     Int? // actual weight in grams
  lengthCm        Decimal? // <-- REMOVE native type hints for SQLite
  widthCm         Decimal?
  heightCm        Decimal?
  volumetricGrams Int?
  service         Service
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order?
}

// Line items inside the shipment declaration (maps your `contentItem` array)
model OrderItem {
  id      String @id @default(cuid())
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  description     String // "photo"
  quantity        Int // "1"
  valueMinor      Int // value in minor units (e.g., 7.00 USD -> 700)
  itemWeightGrams Int // "100"
  currency        String // "USD"
  sku             String? // optional
  hsCode          String? // "490900"
  countryOfOrigin String? // "ID"

  @@index([orderId])
}
